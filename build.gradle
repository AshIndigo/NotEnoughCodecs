buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}


def mc_version_data = [
    '1.8': [
        forge_ver: '11.14.4.1563',
        mappings_ver: 'snapshot_20141130',
        settings_ver: "V1"
    ],
    '1.8.8': [
        forge_ver: '11.15.0.1655',
        mappings_ver: 'snapshot_20151122',
        settings_ver: "V1"
    ],
    '1.8.9': [
        forge_ver: '11.15.1.1902-1.8.9',
        mappings_ver: 'stable_20',
        settings_ver: "V1"
    ],
    '1.9': [
        forge_ver: '12.16.1.1887',
        mappings_ver: 'snapshot_20160312',
        settings_ver: "V1"
    ],
    '1.9.4': [
        forge_ver: '12.17.0.1976',
        mappings_ver: 'snapshot_20160518',
        settings_ver: "V1"
    ],
    '1.10.2' : [
        forge_ver: '12.18.0.2008',
        mappings_ver: 'snapshot_20160518',
        settings_ver: "V1"
    ],
    '1.11' : [
        forge_ver: '13.19.0.2162',
        mappings_ver: 'snapshot_20161111',
        settings_ver: "V2"
    ]
]


if (!project.hasProperty('mc_ver')) {
    ext.mc_ver = default_mc_ver
}

if (!mc_version_data.containsKey(mc_ver)) {
    throw new GradleException("Invalid Minecraft version")
}

def version_data = mc_version_data[mc_ver]
println "Building for MC ${mc_ver}, version data: ${version_data}"
ext {
    forge_ver = version_data.forge_ver
    mappings_ver = version_data.mappings_ver
    settings_ver = version_data.settings_ver
}

repositories {
    mavenCentral()

    maven {
        name 'Forge'
        url 'http://files.minecraftforge.net/maven'
    }

    maven {
        name 'MinecraftS3'
        url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
    }

    maven {
        url 'http://repo.openmods.info/artifactory/openmods'
    }

    maven {
        url 'http://repo.openmods.info/artifactory/thirdparty'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources-${settings_ver}"]
        }
    }
}


configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade "com.badlogicgames.jlayer:jlayer:1.0.2-gdx"
    shade "net.sourceforge.jaadec:jaad:0.8.4"
    shade "org.drogatkin:JustFLAC:1.0"
}

// Grab system env
def env = System.getenv()

version = mod_version

def in_jenkins = false
// Get Jenkins metadata
ext.jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = null
def hash = null
def proc1 = "git rev-parse --short HEAD".execute()
proc1.in.eachLine { line -> hash = line }
proc1.err.eachLine { line -> println line }
proc1.waitFor()

if (!in_jenkins) {
    def proc2 = "git rev-parse --abbrev-ref HEAD".execute()
    proc2.in.eachLine { line -> branch = line }
    proc2.err.eachLine { line -> println line }
    proc2.waitFor()
} else { // In Jenkins
    branch = env.GIT_BRANCH.minus("origin/")
}

// If not on master, add branch to jar name
if (branch != null && !branch.equals("master")) {
    version += "-" + branch
}

// Version tag for jar file name
if (env.BUILD_NUMBER != null) {
    version += "-snapshot-" + env.BUILD_NUMBER
}

// Get Git metadata (if in Jenkins)
ext.gitManifest = manifest {
    if (branch != null) {
        attributes("Git-Branch": branch, "Git-Hash": hash)
    }
}

// Setup Forge plugin
minecraft {
    version = mc_ver + "-" + forge_ver
    runDir = "run"

    mappings = mappings_ver

    replaceIn "NotEnoughCodecs.java"
    replace '@VERSION@', mod_version
    replace 'ModSettings.Default', "ModSettings.${settings_ver}"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version
        expand 'version':project.mod_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Merge Jenkins and Git manifests to form final manifest in final release jar
jar {
    manifest {
        from jenkinsManifest, gitManifest
    }

    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        from jenkinsManifest, gitManifest
    }
}
